Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted, provided that the above
copyright notice and this permission notice appear in all copies.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
--- a/sound/soc/codecs/tlv320aic32x4.c
+++ b/sound/soc/codecs/tlv320aic32x4.c
@@ -1,6 +1,7 @@
 /*
  * linux/sound/soc/codecs/tlv320aic32x4.c
  *
+ * Copyright (c) 2013 The Linux Foundation. All rights reserved.
  * Copyright 2011 Vista Silicon S.L.
  *
  * Author: Javier Martin <javier.martin@vista-silicon.com>
@@ -29,6 +30,7 @@
 #include <linux/delay.h>
 #include <linux/pm.h>
 #include <linux/i2c.h>
+#include <linux/spi/spi.h>
 #include <linux/cdev.h>
 #include <linux/slab.h>
 
@@ -62,6 +64,7 @@ struct aic32x4_priv {
 	u32 sysclk;
 	u8 page_no;
 	void *control_data;
+	enum snd_soc_control_type control_type;
 	u32 power_cfg;
 	u32 micpga_routing;
 	bool swapdacs;
@@ -120,29 +123,43 @@ static const struct snd_kcontrol_new aic
 
 static const struct aic32x4_rate_divs aic32x4_divs[] = {
 	/* 8k rate */
+	{AIC32X4_FREQ_11289600, 8000, 1, 10, 0000, 504, 14, 2, 126, 14, 8, 24},
 	{AIC32X4_FREQ_12000000, 8000, 1, 7, 6800, 768, 5, 3, 128, 5, 18, 24},
+	{AIC32X4_FREQ_12288000, 8000, 1, 8, 0000, 768, 8, 2, 128, 8, 12, 24},
 	{AIC32X4_FREQ_24000000, 8000, 2, 7, 6800, 768, 15, 1, 64, 45, 4, 24},
 	{AIC32X4_FREQ_25000000, 8000, 2, 7, 3728, 768, 15, 1, 64, 45, 4, 24},
 	/* 11.025k rate */
+	{AIC32X4_FREQ_11289600, 11025, 1, 8, 0000, 512, 16, 1, 128, 16, 4, 16},
 	{AIC32X4_FREQ_12000000, 11025, 1, 7, 5264, 512, 8, 2, 128, 8, 8, 16},
+	{AIC32X4_FREQ_12288000, 11025, 1, 11, 0250, 512, 12, 2, 128, 12, 8, 16},
 	{AIC32X4_FREQ_24000000, 11025, 2, 7, 5264, 512, 16, 1, 64, 32, 4, 16},
 	/* 16k rate */
+	{AIC32X4_FREQ_11289600, 16000, 1, 10, 0000, 252, 14, 2, 126, 14, 4, 12},
 	{AIC32X4_FREQ_12000000, 16000, 1, 7, 6800, 384, 5, 3, 128, 5, 9, 12},
+	{AIC32X4_FREQ_12288000, 16000, 1, 8, 0000, 384, 8, 2, 128, 8, 6, 12},
 	{AIC32X4_FREQ_24000000, 16000, 2, 7, 6800, 384, 15, 1, 64, 18, 5, 12},
 	{AIC32X4_FREQ_25000000, 16000, 2, 7, 3728, 384, 15, 1, 64, 18, 5, 12},
 	/* 22.05k rate */
+	{AIC32X4_FREQ_11289600, 22050, 1, 8, 0000, 256, 8, 2, 128, 8, 4, 8},
 	{AIC32X4_FREQ_12000000, 22050, 1, 7, 5264, 256, 4, 4, 128, 4, 8, 8},
+	{AIC32X4_FREQ_12288000, 22050, 1, 11, 0250, 256, 12, 2, 128, 12, 4, 8},
 	{AIC32X4_FREQ_24000000, 22050, 2, 7, 5264, 256, 16, 1, 64, 16, 4, 8},
 	{AIC32X4_FREQ_25000000, 22050, 2, 7, 2253, 256, 16, 1, 64, 16, 4, 8},
 	/* 32k rate */
+	{AIC32X4_FREQ_11289600, 32000, 1, 10, 0000, 126, 7, 4, 63, 7, 8, 6},
 	{AIC32X4_FREQ_12000000, 32000, 1, 7, 1680, 192, 2, 7, 64, 2, 21, 6},
+	{AIC32X4_FREQ_12288000, 32000, 1, 8, 0000, 192, 8, 2, 64, 8, 6, 6},
 	{AIC32X4_FREQ_24000000, 32000, 2, 7, 1680, 192, 7, 2, 64, 7, 6, 6},
 	/* 44.1k rate */
+	{AIC32X4_FREQ_11289600, 44100, 1, 8, 0000, 128, 8, 2, 64, 8, 4, 4},
 	{AIC32X4_FREQ_12000000, 44100, 1, 7, 5264, 128, 2, 8, 128, 2, 8, 4},
+	{AIC32X4_FREQ_12288000, 44100, 1, 11, 0250, 128, 12, 2, 128, 12, 2, 4},
 	{AIC32X4_FREQ_24000000, 44100, 2, 7, 5264, 128, 8, 2, 64, 8, 4, 4},
 	{AIC32X4_FREQ_25000000, 44100, 2, 7, 2253, 128, 8, 2, 64, 8, 4, 4},
 	/* 48k rate */
+	{AIC32X4_FREQ_11289600, 48000, 1, 10, 0000, 84, 7, 4, 42, 7, 8, 4},
 	{AIC32X4_FREQ_12000000, 48000, 1, 8, 1920, 128, 2, 8, 128, 2, 8, 4},
+	{AIC32X4_FREQ_12288000, 48000, 1, 8, 0000, 128, 8, 2, 128, 8, 2, 4},
 	{AIC32X4_FREQ_24000000, 48000, 2, 8, 1920, 128, 8, 2, 64, 8, 4, 4},
 	{AIC32X4_FREQ_25000000, 48000, 2, 7, 8643, 128, 8, 2, 64, 8, 4, 4}
 };
@@ -271,11 +288,20 @@ static inline int aic32x4_change_page(st
 	data[1] = new_page & 0xff;
 
 	ret = codec->hw_write(codec->control_data, data, 2);
-	if (ret == 2) {
-		aic32x4->page_no = new_page;
-		return 0;
+	if (aic32x4->control_type == SND_SOC_SPI) {
+		if (ret == 0) {
+			aic32x4->page_no = new_page;
+			return 0;
+		} else {
+			return ret;
+		}
 	} else {
-		return ret;
+		if (ret == 2) {
+			aic32x4->page_no = new_page;
+			return 0;
+		} else {
+			return ret;
+		}
 	}
 }
 
@@ -298,7 +324,10 @@ static int aic32x4_write(struct snd_soc_
 			return ret;
 	}
 
-	data[0] = fixed_reg & 0xff;
+	if (aic32x4->control_type == SND_SOC_SPI)
+		data[0] = (fixed_reg << 1);
+	else
+		data[0] = fixed_reg & 0xff;
 	data[1] = val & 0xff;
 
 	if (codec->hw_write(codec->control_data, data, 2) == 2)
@@ -313,13 +342,24 @@ static unsigned int aic32x4_read(struct
 	unsigned int page = reg / 128;
 	unsigned int fixed_reg = reg % 128;
 	int ret;
+	u8 buffer;
 
 	if (aic32x4->page_no != page) {
 		ret = aic32x4_change_page(codec, page);
 		if (ret != 0)
 			return ret;
 	}
-	return i2c_smbus_read_byte_data(codec->control_data, fixed_reg & 0xff);
+
+	if (aic32x4->control_type == SND_SOC_SPI) {
+		buffer = (fixed_reg<<1) | 0x01;
+		ret = spi_write_then_read(codec->control_data, &buffer, 1, &buffer, 1);
+		if (ret) {
+			dev_err(codec->dev, "AIC32x4 reg read error\n");
+			return -EIO;
+		}
+		return (unsigned int)buffer;
+	} else
+		return i2c_smbus_read_byte_data(codec->control_data, fixed_reg & 0xff);
 }
 
 static inline int aic32x4_get_divs(int mclk, int rate)
@@ -355,7 +395,9 @@ static int aic32x4_set_dai_sysclk(struct
 	struct aic32x4_priv *aic32x4 = snd_soc_codec_get_drvdata(codec);
 
 	switch (freq) {
+	case AIC32X4_FREQ_11289600:
 	case AIC32X4_FREQ_12000000:
+	case AIC32X4_FREQ_12288000:
 	case AIC32X4_FREQ_24000000:
 	case AIC32X4_FREQ_25000000:
 		aic32x4->sysclk = freq;
@@ -547,6 +589,7 @@ static int aic32x4_set_bias_level(struct
 		/* Switch on BCLK_N Divider */
 		snd_soc_update_bits(codec, AIC32X4_BCLKN,
 				    AIC32X4_BCLKEN, AIC32X4_BCLKEN);
+
 		break;
 	case SND_SOC_BIAS_PREPARE:
 		break;
@@ -628,7 +671,10 @@ static int aic32x4_probe(struct snd_soc_
 	struct aic32x4_priv *aic32x4 = snd_soc_codec_get_drvdata(codec);
 	u32 tmp_reg;
 
-	codec->hw_write = (hw_write_t) i2c_master_send;
+	if (aic32x4->control_type == SND_SOC_SPI)
+		codec->hw_write = (hw_write_t) spi_write;
+	else
+		codec->hw_write = (hw_write_t) i2c_master_send;
 	codec->control_data = aic32x4->control_data;
 
 	snd_soc_write(codec, AIC32X4_RESET, 0x01);
@@ -641,11 +687,9 @@ static int aic32x4_probe(struct snd_soc_
 	if (aic32x4->power_cfg & AIC32X4_PWR_AVDD_DVDD_WEAK_DISABLE) {
 		snd_soc_write(codec, AIC32X4_PWRCFG, AIC32X4_AVDDWEAKDISABLE);
 	}
-
 	tmp_reg = (aic32x4->power_cfg & AIC32X4_PWR_AIC32X4_LDO_ENABLE) ?
 			AIC32X4_LDOCTLEN : 0;
 	snd_soc_write(codec, AIC32X4_LDOCTL, tmp_reg);
-
 	tmp_reg = snd_soc_read(codec, AIC32X4_CMMODE);
 	if (aic32x4->power_cfg & AIC32X4_PWR_CMMODE_LDOIN_RANGE_18_36) {
 		tmp_reg |= AIC32X4_LDOIN_18_36;
@@ -694,6 +738,7 @@ static struct snd_soc_codec_driver soc_c
 	.set_bias_level = aic32x4_set_bias_level,
 };
 
+#if defined(CONFIG_I2C) || defined(CONFIG_I2C_MODULE)
 static __devinit int aic32x4_i2c_probe(struct i2c_client *i2c,
 				      const struct i2c_device_id *id)
 {
@@ -707,6 +752,7 @@ static __devinit int aic32x4_i2c_probe(s
 		return -ENOMEM;
 
 	aic32x4->control_data = i2c;
+	aic32x4->control_type = SND_SOC_I2C;
 	i2c_set_clientdata(i2c, aic32x4);
 
 	if (pdata) {
@@ -745,23 +791,91 @@ static struct i2c_driver aic32x4_i2c_dri
 	.remove =   __devexit_p(aic32x4_i2c_remove),
 	.id_table = aic32x4_i2c_id,
 };
+#endif
+
+#if defined(CONFIG_SPI_MASTER)
+static int __devinit aic32x4_spi_probe(struct spi_device *spi)
+{
+	struct aic32x4_pdata *pdata = spi->dev.platform_data;
+	struct aic32x4_priv *aic32x4;
+	int ret;
+
+	aic32x4 = devm_kzalloc(&spi->dev, sizeof(struct aic32x4_priv),
+			       GFP_KERNEL);
+	if (aic32x4 == NULL)
+		return -ENOMEM;
+
+	spi->mode = SPI_MODE_1;
+	ret = spi_setup(spi);
+	if (ret < 0)
+		return ret;
+
+	aic32x4->control_data = spi;
+	aic32x4->control_type = SND_SOC_SPI;
+	spi_set_drvdata(spi, aic32x4);
+
+	if (pdata) {
+		aic32x4->power_cfg = pdata->power_cfg;
+		aic32x4->swapdacs = pdata->swapdacs;
+		aic32x4->micpga_routing = pdata->micpga_routing;
+	} else {
+		aic32x4->power_cfg = 0;
+		aic32x4->swapdacs = false;
+		aic32x4->micpga_routing = 0;
+	}
+
+	ret = snd_soc_register_codec(&spi->dev,
+			&soc_codec_dev_aic32x4, &aic32x4_dai, 1);
+	return ret;
+}
+
+static int __devexit aic32x4_spi_remove(struct spi_device *spi)
+{
+	snd_soc_unregister_codec(&spi->dev);
+	return 0;
+}
+
+static struct spi_driver aic32x4_spi_driver = {
+	.driver = {
+		.name	= "tlv320aic32x4-spi",
+		.owner	= THIS_MODULE,
+	},
+	.probe		= aic32x4_spi_probe,
+	.remove		= __devexit_p(aic32x4_spi_remove),
+};
+#endif /* CONFIG_SPI_MASTER */
+
 
 static int __init aic32x4_modinit(void)
 {
 	int ret = 0;
 
+#if defined(CONFIG_I2C) || defined(CONFIG_I2C_MODULE)
 	ret = i2c_add_driver(&aic32x4_i2c_driver);
 	if (ret != 0) {
 		printk(KERN_ERR "Failed to register aic32x4 I2C driver: %d\n",
 		       ret);
 	}
+#endif
+#if defined(CONFIG_SPI_MASTER)
+	ret = spi_register_driver(&aic32x4_spi_driver);
+	if (ret != 0) {
+		printk(KERN_ERR "Failed to register aic32x4 SPI driver: %d\n",
+		       ret);
+	}
+#endif
 	return ret;
 }
 module_init(aic32x4_modinit);
 
 static void __exit aic32x4_exit(void)
 {
+#if defined(CONFIG_I2C) || defined(CONFIG_I2C_MODULE)
 	i2c_del_driver(&aic32x4_i2c_driver);
+#endif
+#if defined(CONFIG_SPI_MASTER)
+	spi_unregister_driver(&aic32x4_spi_driver);
+#endif
 }
 module_exit(aic32x4_exit);
 
--- a/sound/soc/codecs/tlv320aic32x4.h
+++ b/sound/soc/codecs/tlv320aic32x4.h
@@ -1,6 +1,8 @@
 /*
  * tlv320aic32x4.h
  *
+ * Copyright (c) 2013 The Linux Foundation. All rights reserved.
+ *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License version 2 as
  * published by the Free Software Foundation.
@@ -85,7 +87,9 @@
 #define AIC32X4_LMICPGAVOL	(AIC32X4_PAGE1 + 59)
 #define AIC32X4_RMICPGAVOL	(AIC32X4_PAGE1 + 60)
 
+#define AIC32X4_FREQ_11289600 11289600
 #define AIC32X4_FREQ_12000000 12000000
+#define AIC32X4_FREQ_12288000 12288000
 #define AIC32X4_FREQ_24000000 24000000
 #define AIC32X4_FREQ_25000000 25000000
 
