#!/bin/sh

BASEDIR="/etc/net6conf"
CONFIG="/bin/config"
EBTABLES="/usr/sbin/ebtables"
IPV6_PSS_PROC="/proc/ipv6_pssthrgh_enable"
P6S_PD="/tmp/dhcp6s_pd"
DHCP6C_PD="/tmp/dhcp6c_pd"
OLD_PD="/tmp/pd_info"
RADVD_CONF="/tmp/radvd.conf"
DHCP6C_SCRIPT="/etc/net6conf/dhcp6c-script"
bridge=`$CONFIG get lan_ifname`
bridge_wan=`$CONFIG get wan_ifname`
LAN=`$CONFIG get true_lanif`
Ipv66rdPrefix=`$CONFIG get Ipv6rdPrefix`
Ipv66rdPrefixlen=`$CONFIG get Ipv6rdPlen`
gw=`$CONFIG get Ipv6rdRelay`
Mask=`$CONFIG get Ipv6rdv4Mask`
IPV6_PPPOE_UNIT=2
RA_DNS_FILE="/tmp/ra_dns_info_file"
PPPOEv6_type=`$CONFIG get ipv6_sameinfo`

if [ "x$PPPOEv6_type" = "x1" ] ;then
	IPV6_PPPOE_UNIT=0
fi

if [ -x /bin/ip ]; then
	# Busybox's ip command
	IP="/bin/ip"
elif [ -x /usr/sbin/ip ]; then
	# iproute2's ip command
	IP="/usr/sbin/ip"
else
	IP="ip"
fi
	
wan6_type=`$CONFIG get ipv6_type`
if [ "$wan6_type" = "pppoe" -o "$wan6_type" = "pptp" ]; then
	WAN="ppp$IPV6_PPPOE_UNIT"
else
	WAN=`$CONFIG get wan_ifname`
fi

wan4_type=`$CONFIG get wan_proto`
# when the connection mode is l2tp, we should get the ip from ppp0 too
if [ "$wan4_type" = "pppoe" -o "$wan4_type" = "pptp" -o "$wan4_type" = "l2tp" ]; then
	WAN4="ppp0"
else
	WAN4=`$CONFIG get wan_ifname`
fi

IPV6_SIDE_ID="0"
DHCP6C_CONF="/tmp/dhcp6c.conf"
DHCP6C_SCRIPT_ENVS="/tmp/dhcp6c_script_envs"

DHCP6S_DEFAULT_TIME=86400
DHCP6S_PREFER_TIME=1800
DHCP6S_DSN="/tmp/dhcp6s_dsn"
DHCP6S_PD="/tmp/dhcp6s_pd"
IPV6_DNS="/tmp/ipv6_dns"
DHCP6S_CONF="/tmp/dhcp6s.conf"

SRVC_LOCK_FILE="/tmp/net6conf_srvc_lock_fileXXX"
SRVC_RELOAD_FILE="/tmp/net6conf_srvc_reload_fileXXX"

lock() {
	local wait_time="60"
	while [ -e $SRVC_LOCK_FILE ]; do
		echo "Wait for get lock file" > /dev/console
		sleep 1
		wait_time=$(( $wait_time - 1 ))
		if [ "$wait_time" -eq "0" ]; then
			return
		fi
	done
	touch $SRVC_LOCK_FILE
}

unlock() {
	rm -f $SRVC_LOCK_FILE
}

geneui64() {
        local lanhw=$1
        local hw1=`echo $lanhw |cut -f1 -d:`
        local hw2=`echo $lanhw |cut -f2 -d:`
        local hw3=`echo $lanhw |cut -f3 -d:`
        local hw4=`echo $lanhw |cut -f4 -d:`
        local hw5=`echo $lanhw |cut -f5 -d:`
        local hw6=`echo $lanhw |cut -f6 -d:`
        local hw1xor=$((0x$hw1 ^ 2))
        # Get the EUI64
        printf "%02x%02x:%02xff:fe%02x:%02x%02x" ${hw1xor} 0x${hw2} 0x${hw3} 0x${hw4} 0x${hw5} 0x${hw6}
}

geteui64() {
        local lanlinkaddr=$1
        local laddr3=`echo $lanlinkaddr | cut -f3 -d:`
        local laddr4=`echo $lanlinkaddr | cut -f4 -d:`
        local laddr5=`echo $lanlinkaddr | cut -f5 -d:`
        local laddr6=`echo $lanlinkaddr | cut -f6 -d:`

	# Deal with specified kinds of lanlinkaddr:
	# fe80:: fe80::1 fe80::1:2 fe80::1:2:3 fe80::1:2:3:4
	if [ x$laddr3 = x ]; then
		printf "%04x:%04x:%04x:%04x" 0x0000 0x0000 0x0000 0x0000
	elif [ x$laddr4 = x ]; then
		printf "%04x:%04x:%04x:%04x" 0x0000 0x0000 0x0000 0x${laddr3}
	elif [ x$laddr5 = x ]; then
		printf "%04x:%04x:%04x:%04x" 0x0000 0x0000 0x${laddr3} 0x${laddr4}
	elif [ x$laddr6 = x ]; then
		printf "%04x:%04x:%04x:%04x" 0x0000 0x${laddr3} 0x${laddr4} 0x${laddr5}
	else
		printf "%04x:%04x:%04x:%04x" 0x${laddr3} 0x${laddr4} 0x${laddr5} 0x${laddr6}
	fi
}

# write file $1 dns info into the file $2 without duplicate
write_ra_dns(){
        for xr in  `awk '{print $2}'  $1 `
        do
                flagadd="1"
                for xw in `awk '{print $2}' $2 `
                do
                        if [ "1$xr" == "1$xw" ] ; then
                                flagadd="0"
                                continue
                        fi
                done
                if [ "$flagadd" == "1" ] ; then
                        echo "nameserver $xr " >> $2;
                fi
        done
}


