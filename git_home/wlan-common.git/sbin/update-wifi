#!/bin/sh

update_conf=wifi
while getopts ":t:" opt;do
    case $opt in
        t)
            if [ "${OPTARG}" = "all" ]; then
                update_conf="all"
            elif [ "${OPTARG}" = "wigig" ]; then
                update_conf="wigig"
            else
                update_conf="wifi"
            fi
            ;;
    esac
done

if [ "$update_conf" = "all" ]; then
    echo "" > /etc/config/wigig
    echo "" > /etc/config/wireless
elif [ "$update_conf" = "wigig" ]; then
    echo "" > /etc/config/wigig
else
    echo "" > /etc/config/wireless
fi
. /etc/dni-wifi-config

get_intf_onoff()
{
    parent_radio=`echo $2 | awk -F _ '{print $1}'`
    eval wl_parent_exist=\$`echo $parent_radio`_exist
    eval wl_config="\$FORCE_CREATE_$2_VAP"
    
    if [ "$wl_parent_exist" = "on" ] && [ "$wl_config" = "on" ]; then
        eval export -- "${1}=on"
    else
        eval export -- "${1}=off"
    fi
}

# This function is to get the prefix of environment variables.
# If environment variables are all named according to same rule, then
# this function will provide help on getting environment variables.
get_wl_prefix()
{
    case "$1" in
        wlg)
            wl_prefix=wl
            ;;
        wla)
            wl_prefix=wla
                ;;
        wlg_guest)
            wl_prefix=wlg1
            ;;
        wla_guest)
            wl_prefix=wla1
            ;;
        wig)
            wl_prefix=wig
            ;;
    esac
}

assign_vap_option()
{
    eval wl_onoff=\$`echo $1`_if_onoff
    eval wl_create_vap=\$FORCE_CREATE_$1_VAP

    if [ "$wl_onoff" = "off" -a "$wl_create_vap" = "on" ] || [ "$wl_onoff" = "on" -a "$wl_hw_btn_state" = "off" ]; then
        uci set wireless.${1}.vap_only=1
    fi
}

generate_mac()
{
    if [ "$1" = "wlg" ]; then
        wl_value=`cat /tmp/mac_addr_2g`
        [ -n "$wl_value" ] || {
            wl_value=$mac_2g
        }
        uci set wireless.${g_device}.macaddr=${wl_value:-"4C:60:DE:CE:61:AE"}
    elif [ "$1" = "wla" ]; then
        wl_value=`cat /tmp/mac_addr_5g`
        [ -n "$wl_value" ] || {
            wl_value=$mac_5g
        }
        uci set wireless.${a_device}.macaddr=${wl_value:-"4C:60:DE:CE:61:AF"}
    elif [ "$1" = "wig" ]; then
        wl_value=`cat /tmp/11ad_mac`
        [ -n "$wl_value" ] || {
            wl_value=$mac_60g
        }
        uci set wigig.${wig_device}.macaddr=${wl_value:-"4C:60:DE:CE:61:AD"}
    fi    
}

generate_channel()
{
    eval wl_value=\$`echo $1`_channel

    if [ "$1" = "wlg" ]; then
        uci set wireless.${g_device}.channel=${wl_value}
    elif [ "$1" = "wla" ]; then
        uci set wireless.${a_device}.channel=${wl_value}
    elif [ "$1" = "wig" ]; then
        uci set wigig.${wig_device}.channel=${wl_value:-2}
    fi
}

generate_hwmode()
{
    eval wl_value=\$`echo $1`_hwmode

    if [ "$1" = "wlg" ]; then
        uci set wireless.${g_device}.hwmode=${wl_value:-11g}
    elif [ "$1" = "wla" ]; then
        uci set wireless.${a_device}.hwmode=${wl_value:-11a}
    elif [ "$1" = "wig" ]; then
        uci set wigig.${wig_device}.hwmode=${wl_value:-11ad}
    fi
}

generate_htmode()
{
    eval wl_value=\$`echo $1`_htmode

    if [ "$1" = "wlg" ]; then
        uci set wireless.${g_device}.htmode=${wl_value:-auto}
    else
        uci set wireless.${a_device}.htmode=${wl_value:-auto}
    fi
}

#
# Generate "wireless.<DEVICE>.disabled" in /etc/config/wireless or
# "wigig.<DEVICE>.disabled" in /etc/config/wigig
#
# Used variables in /etc/dni-wifi-config:
#     wlg_if_onoff  # 2.4 GHz
#     wla_if_onoff  # 5 GHz
#     wig_if_onoff  # 11ad
#
# $1: "wlg" when device is of 2.4 GHz
#     "wla" when device is of 5 GHz
#     "wig" when device is of 60 GHz
#
generate_disabled()
{
    local cfgfile
    local device
    local wl_value

    case "$1" in
        wlg)
            cfgfile=wireless
            device=$g_device
            ;;
        wla)
            cfgfile=wireless
            device=$a_device
            ;;
        wig)
            cfgfile=wigig
            device=$wig_device
            ;;
        *)
            ;;
    esac

    eval wl_value=\$`echo $1`_if_onoff

    if [ "$wl_value" = "off" ]; then
        uci set ${cfgfile}.${device}.disabled=1
    fi
}

generate_cfreq2()
{
    eval wl_value=\$`echo $1`_cfreq2

    if [ "$1" = "wla" ]; then
        [ -n "$wl_value" ] && uci set wireless.${1}.cfreq2=${wl_value}
    fi
}

generate_tpscale()
{
    eval wl_value=\$`echo $1`_tpscale

    if [ "$1" = "wlg" ]; then
        uci set wireless.${g_device}.tpscale=${wl_value:-0}
    else
        uci set wireless.${a_device}.tpscale=${wl_value:-0}
    fi

}

generate_wifi_hw_button_state()
{
    if [ "$wlg_exist" = "on" -a "$wla_exist" = "on" ]; then
        hw_btn_state=$wl_hw_btn_state
    else
        if [ "$1" = "$g_device" ]; then
            hw_btn_state=$wlg_if_onoff
        else
            hw_btn_state=$wla_if_onoff
        fi
    fi

    if [ "$wl_cb_if_onoff" = "on" ]; then
        hw_btn_state="on"
    fi

    uci set wireless.${1}.hw_btn_state=${hw_btn_state}
}

generate_mode()
{
#    eval wl_wds_onoff=\$`echo $1`_wds_onoff
#    eval wl_wds_role=\$`echo $1`_wds_role
#    if [ "$wl_wds_onoff" = "on" -a "$wl_wds_role" = "repeater" ]; then
#        cat <<EOF >> $wifi_config
#        option mode     wds
#EOF
#    else
#        cat <<EOF >> $wifi_config
#        option mode     ap
#EOF
#    fi

    if [ "$1" = "wig" ]; then
        # TODO: support station mode
        uci set wigig.${1}.mode=ap
        return
    fi
    if [ "$wl_cb_if_onoff" = "on" ]; then
        uci set wireless.${1}.mode=sta
        uci set wireless.${1}.cb=qca
    else
        uci set wireless.${1}.mode=ap
    fi
}

generate_vhtng()
{
    #
    # Enable "wireless.<IFACE>.vht_11ng" only when 2.4 GHz device is set to
    # either HT20 or HT40.
    #
    # This can be simply implemented by checking whether "wlg_htmode" is empty
    # or not because, according to /etc/dni-wifi-config , "wlg_htmode"
    # contains value only when "wlg_hwmode" is "11ng".
    #
    if [ "$vht_11ng" = "on" -a "x$wlg_htmode" != "x" ]; then
    	local module_name=`artmtd -r board_model_id | awk -F":" '{print $2}'`
	if [ "$module_name" != "R8900" ]; then
       		uci set wireless.${1}.vht_11ng=1
	elif [ "$module_name" = "R8900" ]; then
		#For R8900, 2.4G only support 64QAM
		uci set wireless.${1}.vht_11ng=0
	fi
    fi
}

generate_wps()
{
    eval wps_onoff=\$`echo $1`_wps_onoff

    if [ "$wps_onoff" = "off" ]; then
        return;
    fi
    
    if [ "$wsc_lock_down" = "1" ]; then
        wl_wps_ap_setup_locked=1
    else
        eval wl_wps_ap_setup_locked=\$`echo $1`_wps_ap_setup_locked
    fi

    eval wl_wps_configured=\$`echo $1`_wps_configured
    if [ "$wl_wps_configured" = "configured" ]; then
        wl_wps_enable_onoff=2
    else
        wl_wps_enable_onoff=1
    fi

    wl_value=$wps_config_method
    [ -n "$wl_value" ] || {
        #default config method
        wl_value="virtual_display virtual_push_button physical_push_button"
    }

    uci set wireless.${1}.ap_setup_locked=${wl_wps_ap_setup_locked}
    uci set wireless.${1}.wps_state=${wl_wps_enable_onoff}
    uci set wireless.${1}.wps_config="$wl_value"
}

generate_wps_device_name()
{
    eval wps_onoff=\$`echo $1`_wps_onoff
    
    if [ "$wps_onoff" = "off" ]; then
        return;
    fi

    wl_device_name="`echo $wps_device_name`(Wireless AP)"

    uci set wireless.${1}.wps_device_name="${wl_device_name}"
}

generate_ssid()
{
    eval wl_value=\$`echo $1`_ssid

    # handle special characters
    wl_value=$(echo "$wl_value" | sed  -e 's/\\"/\"/g')
    wl_value=$(echo "$wl_value" | sed  -e 's/\\\\\\\\/\\/g')
    wl_value=$(echo "$wl_value" | sed  -e 's/\\\\\\`/\`/g')

    if [ "$1" = "wig" ]; then
        uci set wigig.${1}.ssid="${wl_value:-DNIWIFI}"
    else
        uci set wireless.${1}.ssid="${wl_value:-DNIWIFI}"
    fi
}

generate_hide_ssid()
{
    eval wl_value=\$`echo $1`_hide_ssid_onoff

    if [ "$1" = "wig" ]; then
        cfgfile=wigig
    else
        cfgfile=wireless
    fi

    if [ "$wl_value" = "on" ]; then
        uci set ${cfgfile}.${1}.hidden=1
    else
        uci set ${cfgfile}.${1}.hidden=0
    fi
}

generate_puren()
{
    eval wl_value=\$`echo $1`_puren_onoff
    if [ "$wl_value" = "on" ]; then
        uci set wireless.${1}.puren=1
    fi
}

generate_doth()
{
    if [ "x$1" = "xwla" ]; then
        wl_doth=${wla_doth}
   else
        wl_doth=0
   fi

   uci set wireless.${1}.doth=${wl_doth}
}

generate_disablecoext()
{
    eval wl_value=\$`echo $1`_disablecoext
    uci set wireless.${1}.disablecoext=${wl_value:-0}
}

generate_security()
{
    eval wl_sectype=\$`echo $1`_sectype

    if [ "$1" = "wig" ]; then
        cfgfile=wigig
    else
        cfgfile=wireless
    fi

    if [ "$1" = "wlg" ]; then
    	if [ $wl_sectype = wep ]; then
		uci set wireless.qcawifi.wepreload=1
	else
		uci set wireless.qcawifi.wepreload=0
	fi
    fi

    case "$wl_sectype" in
        off)
            eval uci set ${cfgfile}.${1}.encryption=none
            ;;
        *wep*)
            get_wl_prefix "$1"
            load_wep_config "$wl_prefix" "$1"
            eval wl_wep_auth_type=\$wep_auth_type_`echo $((${1}_auth))`
            case "$wl_wep_auth_type" in
                open)
                    auth_type="open"
                    ;;
                shared)
                    auth_type="shared"
                    ;;
                *)
                    auth_type="mixed"
                    ;;
            esac
            eval wl_wep_keyix=\$`echo $1`_key
            eval wl_key_length=\$`echo $1`_key_length
            uci set wireless.${1}.encryption=${wl_sectype}-${auth_type}
            uci set wireless.${1}.key=${wl_wep_keyix}
            for idx in 1 2 3 4; do
                eval wl_wep_key=\$`echo $1`_key${idx}
                [ -n "$wl_wep_key" ] && {
                    tmp_key_length=`expr length $wl_wep_key`
                    if [ "$wl_key_length" = "5" ]; then
                        if [ "$tmp_key_length" = "10" ]; then
                            uci set wireless.${1}.key${idx}_format=HEX
                        elif [ "$tmp_key_length" = "5" ]; then
                            uci set wireless.${1}.key${idx}_format=ASCII
                        fi
                    else
                        if [ "$tmp_key_length" = "26" ]; then
                            uci set wireless.${1}.key${idx}_format=HEX
                        elif [ "$tmp_key_length" = "13" ]; then
                            uci set wireless.${1}.key${idx}_format=ASCII
                        fi
                    fi
                }
                uci set wireless.${1}.key${idx}=${wl_wep_key}
            done
            ;;
        *psk*)
            get_wl_prefix "$1"
            dni_config_get_psk_phrase wl_psk_phrase "$wl_prefix" "$wl_sectype"
            if [ "$1" = "wig" ]; then
                uci set wigig.${1}.encryption="${wl_sectype}+gcmp"
            else
                uci set wireless.${1}.encryption=${wl_sectype}
            fi

            # handle special characters
            wl_psk_phrase=$(echo "$wl_psk_phrase" | sed  -e 's/\\"/\"/g')
            wl_psk_phrase=$(echo "$wl_psk_phrase" | sed  -e 's/\\\\/\\/g')
            wl_psk_phrase=$(echo "$wl_psk_phrase" | sed  -e 's/\\`/\`/g')

            uci set ${cfgfile}.${1}.key="$wl_psk_phrase"
            ;;
        *wpa*)
            get_wl_prefix "$1"
            load_wpa_config "$wl_prefix"
            uci set wireless.${1}.encryption=${_tmp_wpa}
            uci set wireless.${1}.key=${wl_auth_sv_secret}
            uci set wireless.${1}.server=${wl_auth_sv_ip}
            uci set wireless.${1}.port=${wl_auth_sv_port}
            ;;
    esac
            
}

generate_protocol_setting()
{
    parent_radio=`echo $1 | awk -F _ '{print $1}'`
    eval wl_rts_value=\$`echo $parent_radio`_rts
    eval wl_frag_value=\$`echo $parent_radio`_frag
    eval wl_wmm_value=\$`echo $parent_radio`_wmm_onoff
    eval wl_preamble_value=\$`echo $parent_radio`_preamble
    eval wl_country_ie_value=\$`echo $parent_radio`_country_ie_onoff

    uci set wireless.${1}.rts=${wl_rts_value}
    uci set wireless.${1}.frag=${wl_frag_value}
    if [ "$wl_wmm_value" = "on" ]; then
        uci set wireless.${1}.wmm=1
    else
        uci set wireless.${1}.wmm=0
    fi
    if [ "$wl_country_ie_value" = "on" ]; then
        uci set wireless.${1}.countryie=1
    else
        uci set wireless.${1}.countryie=0
    fi
    case "$wl_preamble_value" in
        *long*)
            uci set wireless.${1}.short_preamble=0
            ;;
        *)
            uci set wireless.${1}.short_preamble=1
            ;;
    esac
}

generate_acl()
{
    parent_radio=`echo $1 | awk -F _ '{print $1}'`

    eval wl_acl_onoff=\$`echo $parent_radio`_acl_onoff
    if [ "$wl_acl_onoff" = "off" ]; then
        return;
    fi

    uci set wireless.${1}.macfilter=allow
    dni_config_get acl_sta_num wl_acl_num
    acl_sta_num=${acl_sta_num:-0}
    num=1
    while [ $num -le $acl_sta_num ]; do
        dni_config_get mac "wlacl${num}"
        addr=$(echo "$mac" | while read name value; do echo "$value"; done)
        uci add_list wireless.${1}.maclist=${addr}
        num=$(($num + 1))
    done
}

generate_wds()
{
    eval wl_wds_onoff=\$`echo $1`_wds_onoff
    if [ "$wl_wds_onoff" = "off" ]; then
        return
    fi

    eval wl_wds_role=\$`echo $1`_wds_role

    # The variable naming of wds is different with others.
    # Use another way for it.
    case "$1" in
        wlg)
            wl_wds_postfix=
            radio_device="${g_device}"
            ;;
        wla)
            wl_wds_postfix="_a"
            radio_device="${a_device}"
            ;;
    esac

    # ROOTAP (Base station) section
    if [ "$wl_wds_role" = "rootap" ]; then
        for idx in 1 2 3 4; do
            dni_config_get wl_repeater_mac repeater_mac${idx}${wl_wds_postfix}
            if [ "x$wl_repeater_mac" != "x" ]; then
                uci add_list wireless.${1}.maclist=${wl_repeater_mac}
                uci add_list wireless.${1}.nawds_add_repeater=${wl_repeater_mac}
            fi
        done

        dni_config_get wds_client_assoc_onoff wds_endis_mac_client${wl_wds_postfix}
        if [ "$wds_client_assoc_onoff" = "off" ]; then
            uci set wireless.${1}.macfilter=allow
        fi
        uci set wireless.${1}.mode=ap
        uci set wireless.${1}.wds=1
        uci set wireless.${1}.nawds_mode=1
    fi

    if [ "$wl_wds_role" = "repeater" ]; then
        eval wl_wds_repeater_assoc_onoff=\$`echo $1`_wds_repeater_assoc_onoff
        dni_config_get wl_wds_rootap_mac basic_station_mac${wl_wds_postfix}

        # Does not allow wireless client association.
        if [ "$wl_wds_repeater_assoc_onoff" = "off" ]; then
            uci set wireless.${1}.mode=sta
            uci set wireless.${1}.wds=1
            uci set wireless.${1}.bssid=${wl_wds_rootap_mac}
            # sta mode doesn't need set ssid
            uci delete wireless.${1}.ssid
        else
            # allow wireless client association, so there will be two
            # interfaces created.

            # set wds ap vap
            uci set wireless.${1}.mode=ap
            uci set wireless.${1}.wds=1
            uci set wireless.${1}.vap_ind=1

            # set wds sta vap
            uci set wireless."${1}_wds_sta"=wifi-iface
            uci set wireless."${1}_wds_sta".network=lan
            uci set wireless."${1}_wds_sta".device=${radio_device}
            uci set wireless."${1}_wds_sta".bridge=${lan_ifname}
            uci set wireless."${1}_wds_sta".mode=sta
            uci set wireless."${1}_wds_sta".wds=1
            uci set wireless."${1}_wds_sta".bssid=${wl_wds_rootap_mac}
            uci set wireless."${1}_wds_sta".vap_ind=1
        fi
    fi

}

generate_bintval()
{
    case "$1" in
        wlg)
            uci set wireless.${1}.bintval=100
            ;;
        wla)
            uci set wireless.${1}.bintval=100
            ;;
        wlg_guest)
            uci set wireless.${1}.bintval=200
            ;;
        wla_guest)
            uci set wireless.${1}.bintval=200
            ;;
    esac
}

generate_dtim()
{
    case "$1" in
        wlg | wla)
            eval guest_if_onoff=\$`echo $1`_guest_if_onoff
            # guest network is disabled
            if [ "$guest_if_onoff" = "off" ]; then
                uci set wireless.${1}.dtim_period=${wl_dtim_wo_guest}
            else
                uci set wireless.${1}.dtim_period=${wl_dtim_w_guest}
            fi
            ;;
        wlg_guest | wla_guest)
            uci set wireless.${1}.dtim_period=${wl_guest_dtim}
            ;;
    esac
}

generate_PIN()
{
    [ -f /sbin/fetchPIN ] && /sbin/fetchPIN

    if [ -f /tmp/wpspin-setted ]; then
        pin_num=`cat /tmp/wpspin-setted`
    else
        pin_num=`cat /tmp/wpspin`
    fi
    uci set wireless.${1}.wps_pin=${pin_num-:12345670}
}

generate_lan_restricted_access()
{
    eval wl_lan_restricted_access_onoff=\$`echo $1`_lan_restricted_access_onoff
    # if lan restricted access is off, it means every one can access the network, so
    # we don't need to generate ebtables rules.
    if [ "$wl_lan_restricted_access_onoff" = "off" ]; then
        return;
    fi

    wl_guest_iptv_on=`config get wan_brig_guest_ssid1`
    wla_guest_iptv_on=`config get wan_brig_guest_ssid2`
    if [ "$1" = "wlg_guest" -a "${wl_guest_iptv_on}" = "1" ] || [ "$1" = "wla_guest" -a "${wla_guest_iptv_on}" = "1" ]; then
        gui_region=`config get GUI_Region`
        [ -f /tmp/firmware_region ] && firmware_region=`cat /tmp/firmware_region | awk '{print $1}'`
        if [ "$firmware_region" = "" ] || [ "$firmware_region" = "WW" ]; then
            if [ "$gui_region" = "Russian" ] || [ "$gui_region" = "Chinese" ]; then
                return;
            fi
        elif [ "$firmware_region" = "RU" ] || [ "$firmware_region" = "PR" ]; then
                return;
        fi
    fi

    uci set wireless.${1}.lan_restricted=1
    uci set wireless.${1}.lan_ipaddr=${lan_ipaddr}
}

generate_wireless_isolation()
{
    eval wl_wireless_isolation_onoff=\$`echo $1`_wireless_isolation_onoff
    if [ "$wl_wireless_isolation_onoff" = "off" ]; then
        return;
    fi

    uci set wireless.${1}.isolate=1
}

generate_bf()
{
    local wl_value=

    eval wl_bf_onoff=\$`echo $1`_bf_onoff
    if [ "$wl_bf_onoff" = "on" ]; then
        wl_value=1
    elif [ "$wl_bf_onoff" = "off" ]; then
        wl_value=0
    fi
    if [ "$1" = "wlg" ]; then
        uci set wireless.${g_device}.bf=${wl_value}
    else
        uci set wireless.${a_device}.bf=${wl_value}
    fi
}

#
# Generate "wireless.<DEVICE>.implicitbf" in /etc/config/wireless
#
# Used variable in etc/dni-wifi-config: wla_implicit_bf_onoff
#
# $1: "wla" when device is 5 GHz
#
generate_implicitbf()
{
    eval wl_implicit_bf_onoff=\$`echo $1`_implicit_bf_onoff

    if [ "$wl_implicit_bf_onoff" = "on" ]; then
        wl_value=1
    else
        wl_value=0
    fi

    if [ "$1" = "wla" ]; then
        uci set wireless.${a_device}.implicitbf=${wl_value}
    fi
}

#
# Generate "wireless.<DEVICE>.mu_mimo" in /etc/config/wireless
#
# Used variable in etc/dni-wifi-config: wla_mu_mimo_onoff
#
# $1: "wla" when device is 5 GHz
#
generate_mu_mimo()
{
    local wl_mu_mimo_value=

    eval wl_mu_mimo_onoff=\$`echo $1`_mu_mimo_onoff

    if [ "$wl_mu_mimo_onoff" = "on" ]; then
        wl_mu_mimo_value=1
    elif [ "$wl_mu_mimo_onoff" = "off" ]; then
        wl_mu_mimo_value=0
    fi

    if [ "$1" = "wla" ]; then
        uci set wireless.${a_device}.mu_mimo=${wl_mu_mimo_value}
    fi
}

generate_lbd()
{
    local lbd_enable=
   
#   eval lbd_conf_onoff=\$`echo $1`_onoff

    if [ x"$lbd_onoff" = x"1" ]; then
	   lbd_enable=1
    else
	   lbd_enable=0
    fi
    uci set lbd.@config[0].Enable=${lbd_enable}
}

generate_hostapd_debug_level()
{
    eval wl_hostapd_debug_level=\$`echo $1`_hostapd_debug_level

    if [ "$1" = "wig" ]; then
        cfgfile=wigig
    else
        cfgfile=wireless
    fi
    uci set ${cfgfile}.${1}.hostapd_debug_level=$wl_hostapd_debug_level
}

if [ "$update_conf" = "wifi" -o "$update_conf" = "all" ]; then
    # config driver parameters
    uci set wireless.qcawifi=qcawifi
    if [ "$wlg_super_wifi" == "1" ]; then
    	uci set wireless.qcawifi.wl_tpscale=-1
    else
    	uci set wireless.qcawifi.wl_tpscale=0
    fi
    if [ "$wla_super_wifi" == "1" ]; then
    	uci set wireless.qcawifi.wla_tpscale=-1
    else
        uci set wireless.qcawifi.wla_tpscale=0
    fi
    uci set wireless.qcawifi.wepreload=0
    if [ "$wlg_exist" = "on" ]; then
        uci set wireless.${g_device}=wifi-device
        uci set wireless.${g_device}.type=qcawifi
        uci set wireless.${g_device}.country=${country_code}
        uci set wireless.${g_device}.ODM=dni
        uci set wireless.${g_device}.sys_bridge=${lan_ifname}
        generate_wifi_hw_button_state "$g_device"
        generate_mac "wlg"
        generate_channel "wlg"
        generate_hwmode "wlg"
        generate_htmode "wlg"
        generate_bf "wlg"
    fi

    if [ "$wla_exist" = "on" ]; then
        uci set wireless.${a_device}=wifi-device
        uci set wireless.${a_device}.type=qcawifi
        uci set wireless.${a_device}.country=${country_code}
        uci set wireless.${a_device}.ODM=dni
        uci set wireless.${a_device}.sys_bridge=${lan_ifname}
        generate_wifi_hw_button_state "$a_device"
        generate_mac "wla"
        generate_channel "wla"
        generate_hwmode "wla"
        generate_htmode "wla"
        generate_bf "wla"
        generate_implicitbf "wla"
        generate_mu_mimo "wla"
    fi

    get_intf_onoff _tmp_wlg_onoff "wlg"
    if [ "$_tmp_wlg_onoff" = "on" ]; then
        uci set wireless.wlg=wifi-iface
        uci set wireless.wlg.device=${g_device}
        uci set wireless.wlg.network=lan
        uci set wireless.wlg.bridge=${wlg_bridge}
        uci set wireless.wlg.vlan_pri=${wlg_priority}
        assign_vap_option "wlg"
        generate_mode "wlg"
        generate_vhtng "wlg"
        generate_wps "wlg"
        generate_wps_device_name "wlg"
        generate_ssid "wlg"
        generate_hide_ssid "wlg"
        generate_puren "wlg"
        generate_doth "wlg"
        generate_disablecoext "wlg"
        generate_security "wlg"
        generate_protocol_setting "wlg"
        generate_acl "wlg"
        generate_wds "wlg"
        generate_bintval "wlg"
        generate_dtim "wlg"
        generate_PIN "wlg"
        generate_hostapd_debug_level "wlg"
    fi

    get_intf_onoff _tmp_wla_onoff "wla"
    if [ "$_tmp_wla_onoff" = "on" ]; then
        uci set wireless.wla=wifi-iface
        uci set wireless.wla.device=${a_device}
        uci set wireless.wla.network=lan
        uci set wireless.wla.bridge=${wla_bridge}
        uci set wireless.wla.vlan_pri=${wla_priority}
        assign_vap_option "wla"
        generate_cfreq2 "wla"
        generate_mode "wla"
        generate_wps "wla"
        generate_wps_device_name "wla"
        generate_ssid "wla"
        generate_hide_ssid "wla"
        generate_puren "wla"
        generate_doth "wla"
        generate_disablecoext "wla"
        generate_security "wla"
        generate_protocol_setting "wla"
        generate_acl "wla"
        generate_wds "wla"
        generate_bintval "wla"
        generate_dtim "wla"
        generate_PIN "wla"
        generate_hostapd_debug_level "wla"
    fi

    get_intf_onoff _tmp_wlg_guest_onoff "wlg_guest"
    if [ "$_tmp_wlg_guest_onoff" = "on" ]; then
        uci set wireless.wlg_guest=wifi-iface
        uci set wireless.wlg_guest.device=${g_device}
        uci set wireless.wlg_guest.network=lan
        uci set wireless.wlg_guest.bridge=${wlg_guest_bridge}
        uci set wireless.wlg_guest.vlan_pri=${wlg_guest_priority}
        assign_vap_option "wlg_guest"
        generate_mode "wlg_guest"
        generate_ssid "wlg_guest"
        generate_vhtng "wlg_guest"
        generate_security "wlg_guest"
        generate_hide_ssid "wlg_guest"
        generate_protocol_setting "wlg_guest"
        generate_acl "wlg_guest"
        generate_lan_restricted_access "wlg_guest"
        generate_wireless_isolation "wlg_guest"
        generate_bintval "wlg_guest"
        generate_dtim "wlg_guest"
        generate_doth "wlg_guest"
        generate_disablecoext "wlg_guest"
    fi

    get_intf_onoff _tmp_wla_guest_onoff "wla_guest"
    if [ "$_tmp_wla_guest_onoff" = "on" ]; then
        uci set wireless.wla_guest=wifi-iface
        uci set wireless.wla_guest.device=${a_device}
        uci set wireless.wla_guest.network=lan
        uci set wireless.wla_guest.bridge=${wla_guest_bridge}
        uci set wireless.wla_guest.vlan_pri=${wla_guest_priority}
        assign_vap_option "wla_guest"
        generate_mode "wla_guest"
        generate_ssid "wla_guest"
        generate_security "wla_guest"
        generate_hide_ssid "wla_guest"
        generate_protocol_setting "wla_guest"
        generate_acl "wla_guest"
        generate_lan_restricted_access "wla_guest"
        generate_wireless_isolation "wla_guest"
        generate_bintval "wla_guest"
        generate_dtim "wla_guest"
        generate_disablecoext "wla_guest"
    fi
    uci commit wireless
    sync

    generate_lbd "lbd"
    uci commit lbd
    sync
fi

if [ "$update_conf" = "wigig" -o "$update_conf" = "all" ]; then
    if [ "x$wig_exist" = "xon" -a -d /sys/class/ieee80211/phy0 ]; then
        uci set wigig.${wig_device}=wigig-device
        uci set wigig.${wig_device}.type=mac80211
        generate_mac "wig"
        generate_channel "wig"
        generate_hwmode "wig"
        generate_disabled "wig"
        uci set wigig.wig=wigig-iface
        uci set wigig.wig.device=${wig_device}
        uci set wigig.wig.bridge=${wig_bridge}
        generate_mode "wig"
        generate_ssid "wig"
        generate_hide_ssid "wig"
        generate_security "wig"
        generate_hostapd_debug_level "wig"
        if [ -x /usr/bin/readlink ]; then
            path="$(readlink -f /sys/class/ieee80211/phy0/device)"
            path="${path##/sys/devices/}"
            uci set wigig.${wig_device}.path=$path
            uci set wigig.${wig_device}.phy=phy0
        else
            macaddr=`cat /sys/class/ieee80211/${dev}/macaddress`
            uci set wigig.${wig_device}.macaddr='$macaddr'
        fi
        uci commit wigig
        sync
    fi
fi


